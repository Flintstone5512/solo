{
  "name": "solomoney",
  "main": "expo-router/entry",
  "version": "1.0.0",
  "scripts": {
    "start": "expo start",
    "reset-project": "node ./scripts/reset-project.js",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web",
    "test": "jest --watchAll",
    "lint": "expo lint"
  },
  "jest": {
    "preset": "jest-expo"
  },
  "dependencies": {
    "@expo-google-fonts/cabin": "^0.2.3",
    "@expo-google-fonts/lato": "^0.2.3",
    "@expo/vector-icons": "^14.0.2",
    "@react-native-async-storage/async-storage": "1.23.1",
    "@react-navigation/native": "^6.0.2",
    "expo": "~51.0.17",
    "expo-barcode-scanner": "~13.0.1",
    "expo-constants": "~16.0.2",
    "expo-font": "~12.0.7",
    "expo-linking": "~6.3.1",
    "expo-modules-core": "^1.12.19",
    "expo-router": "~3.5.17",
    "expo-splash-screen": "~0.27.5",
    "expo-status-bar": "~1.12.1",
    "expo-system-ui": "^3.0.7",
    "expo-web-browser": "~13.0.3",
    "install": "^0.13.0",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-native": "^0.74.3",
    "react-native-camera": "^4.2.1",
    "react-native-gesture-handler": "~2.16.1",
    "react-native-plaid-link-sdk": "^11.11.1",
    "react-native-qrcode-scanner": "^1.5.5",
    "react-native-reanimated": "~3.10.1",
    "react-native-safe-area-context": "4.10.5",
    "react-native-screens": "3.31.1",
    "react-native-svg": "^15.2.0",
    "react-native-svg-transformer": "^1.4.0",
    "react-native-unit-components": "^1.13.0",
    "react-native-web": "~0.19.10",
    "react-native-webview": "13.8.6",
    "typescript": "~5.3.3"
  },
  "devDependencies": {
    "@babel/core": "^7.20.0",
    "@babel/preset-env": "^7.24.8",
    "@types/jest": "^29.5.12",
    "@types/react-native": "^0.73.0",
    "@types/react-test-renderer": "^18.0.7",
    "jest": "^29.2.1",
    "jest-expo": "~51.0.3",
    "react-test-renderer": "18.2.0"
  },
  "private": true
}


"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _useIsJailbrokeDevice = require("../../hooks/useIsJailbrokeDevice");
var _useSnapshotProtection = require("../../hooks/useSnapshotProtection");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const UnitAndroidSecureView = (0, _reactNative.requireNativeComponent)('UNSecureView');
const UNBaseView = props => {
  (0, _useSnapshotProtection.useSnapshotProtection)();
  const isJailbroke = (0, _useIsJailbrokeDevice.useIsJailbrokeDevice)();
  (0, _react.useEffect)(() => {
    if (isJailbroke) {
      props.onLoadError && props.onLoadError({
        errors: [{
          title: 'Device is Jailbroke'
        }]
      });
    }
  }, [props, isJailbroke]);
  if (isJailbroke) {
    return null;
  }
  if (_reactNative.Platform.OS == 'android') {
    return /*#__PURE__*/_react.default.createElement(UnitAndroidSecureView, _extends({
      filterTouchesWhenObscured: true
    }, props));
  } else {
    return /*#__PURE__*/_react.default.createElement(_reactNative.View, props);
  }
};
var _default = exports.default = UNBaseView;
//# sourceMappingURL=UNBaseView.js.map





import { NativeModules, Platform } from 'react-native';
const { AndroidAppInfo, IOSAppInfo } = NativeModules;

const appInfoModule = Platform.OS === 'android' ? AndroidAppInfo : IOSAppInfo;

export const getAppName = async () => {
  try {
    const response = await appInfoModule.getAppName();
    return response;
  } catch (error) {
    console.error(error);
  }
};

export const getVersion = async () => {
  try {
    const response = await appInfoModule.getVersion();
    return response;
  } catch (error) {
    console.error(error);
  }
};

export const getBuildNumber = async () => {
  try {
    const response = await appInfoModule.getBuildNumber();
    return response;
  } catch (error) {
    console.error(error);
  }
};

export const getAppIdentifier = async () => {
  try {
    const response = await appInfoModule.getAppIdentifier();
    return response;
  } catch (error) {
    console.error(error);
  }
};
